@page "/mars"
@using System.Timers
@using MarsClock.Components.Services

<PageTitle>Mars Clock</PageTitle>

<h1>Reloj en Marte</h1>

<p>Tiempo Solar Medio Local (LMST): @_marsLocalMeanSolarTime</p>
<p>Tiempo Solar Verdadero Local (LTST): @_marsLocalTrueSolarTime</p>

@code
{
    private Timer? _timer;
    private double _marsLocalMeanSolarTime;
    private double _marsLocalTrueSolarTime;
    private const double MarsLongitude = 0;

    protected override void OnInitialized()
    {
        _timer = new Timer(1000);
        _timer.Elapsed += UpdateMarsTime;
        _timer.Start();

        UpdateMarsTime(null, null);
    }

    private void UpdateMarsTime(object? sender, ElapsedEventArgs? e)
    {
        var millis = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        var julianDateUt = MarsTimeService.GetJulianDateUt(millis);
        var julianDateTt = MarsTimeService.GetJulianDateTt(julianDateUt,69.184);
        var deltaJ2000 = MarsTimeService.DeltaJ2000(julianDateTt);
        
        var marsMeanAnomaly = MarsTimeService.MarsMeanAnomaly(deltaJ2000);
        var alphaFms = MarsTimeService.FictionMeanSun(deltaJ2000);
        var equationOfCenter = MarsTimeService.EquationOfCenter(marsMeanAnomaly, deltaJ2000);
        var solarLongitude = MarsTimeService.AreocentricSolarLongitude(alphaFms, equationOfCenter);
        
        var eot = MarsTimeService.EquationOfTime(solarLongitude, equationOfCenter);
        var marsSolDate = (julianDateTt - 2451549.5 + deltaJ2000 * 1.0274912517) / 1.0274912517;
        
        _marsLocalMeanSolarTime = MarsTimeService.LocalMeanSolarTime(marsSolDate, MarsLongitude);
        _marsLocalTrueSolarTime = MarsTimeService.LocalTrueSolarTime(_marsLocalMeanSolarTime, eot);
        
        InvokeAsync(StateHasChanged);
    }
}
