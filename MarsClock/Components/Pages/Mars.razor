@page "/mars"
@using System.Globalization
@using System.Timers
@using MarsClock.Components.Services
@inject MarsTimeService Mts

<PageTitle>Mars Clock</PageTitle>

<h1>Mars time</h1>

<h2>Earth</h2>
<p>Earth Date and Time (UTC): @_earthDateTime</p>
<p>Millis: @_formattedMillis</p>
<p>Julian Date UT (JDUT): @_formattedJulianDateUt</p>
<p>Julian Date TT (JDTT): @_formattedJulianDateTt</p>
<p>Days Since J2000 Epoch: @_formattedDaysSinceJ2000Epoch</p>

<h2>Mars</h2>
<p>Mars Sol Date (MSD): @_formattedMsd</p>
<p>Coordinated Mars Time (CMT): @_coordinatedMarsTime</p>
<p>Mars Mean Anomaly (M): @_marsMeanAnomaly</p>
<p>Angle of Fiction Mean Sun  (alphaFMS): @_alphaFms</p>
<p>Mars Local Mean Solar Time (LMST): @_marsLocalMeanSolarTime</p>
<!-- <p>Mars Local True Solar Time (LTST): @_marsLocalTrueSolarTime</p> -->
<p>Equation of Center: @_equationOfCenter</p>
<p>EOT: @_eot</p>

@code
{
    private Timer? _timer;
    private DateTime _earthDateTime;
    private string _formattedMillis = string.Empty;
    private string _formattedJulianDateUt = string.Empty;
    private string _formattedJulianDateTt = string.Empty;
    private string _formattedDaysSinceJ2000Epoch = string.Empty;
    private string _formattedMsd = string.Empty;
    private string _coordinatedMarsTime = string.Empty;
    private double _marsLocalMeanSolarTime;
    private double _marsMeanAnomaly;
    //private double _marsLocalTrueSolarTime;
    private double _eot;
    private double _alphaFms;
    private double _equationOfCenter;
    private double _solarLongitude;
    private const double MarsLongitude = 0;
    

    protected override void OnInitialized()
    {
        _timer = new Timer(1000);
        _timer.Elapsed += UpdateMarsTime;
        _timer.Start();

        UpdateMarsTime(null, null);
    }

    private void UpdateMarsTime(object? sender, ElapsedEventArgs? e)
    {
        var cultureInfo = new CultureInfo("es-ES")
        {
            NumberFormat = { NumberDecimalSeparator = ",", NumberGroupSeparator = "." }
        };
        
        var millis = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        var julianDateUt = Mts.GetJulianDateUt(millis);
        var julianDateTt = Mts.GetJulianDateTt(julianDateUt);
        var daysSinceJ2000Epoch = Mts.GetDeltaJ2000(julianDateTt);
        var marsSolDate = ((daysSinceJ2000Epoch - 4.5) / 1.0274912517) + 44796.0 - 0.00096;
        
        _earthDateTime = DateTimeOffset.UtcNow.UtcDateTime;
        _marsMeanAnomaly = Mts.GetMarsMeanAnomaly(daysSinceJ2000Epoch);
        
        _alphaFms = Mts.GetFictionMeanSun(daysSinceJ2000Epoch);
        _equationOfCenter = Mts.GetEquationOfCenter(_marsMeanAnomaly, daysSinceJ2000Epoch);
        _solarLongitude = Mts.GetAreocentricSolarLongitude(_alphaFms, _equationOfCenter);
        
        
        _eot = Mts.GetEquationOfTime(_solarLongitude, _equationOfCenter);
        
        _marsLocalMeanSolarTime = Mts.GetLocalMeanSolarTime(marsSolDate, MarsLongitude);
        _coordinatedMarsTime = Mts.GetCoordinatedMarsTime(marsSolDate);
        
        _formattedMillis = millis.ToString("N0", cultureInfo);
        _formattedJulianDateUt = julianDateUt.ToString("N6", cultureInfo);
        _formattedJulianDateTt = julianDateTt.ToString("N6", cultureInfo);
        _formattedDaysSinceJ2000Epoch = daysSinceJ2000Epoch.ToString("N6", cultureInfo);
        _formattedMsd = marsSolDate.ToString("N6", cultureInfo);
        
        InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        _timer?.Dispose();
    }
}
