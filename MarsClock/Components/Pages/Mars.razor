@page "/mars"
@using System.Globalization
@using System.Timers
@using MarsClock.Components.Services
@inject MarsTimeService Mts

<PageTitle>Mars Clock</PageTitle>

<h1>Mars time</h1>

<h2>Earth</h2>
<p>Earth Date and Time (UTC): @_earthDateTime</p>
<p>Millis: @_formattedMillis</p>
<p>Julian Date UT (JDUT): @_formattedJulianDateUt</p>
<p>Julian Date TT (JDTT): @_formattedJulianDateTt</p>
<p>Days Since J2000 Epoch: @_formattedDaysSinceJ2000Epoch</p>

<h2>Mars</h2>
<p>Mars Sol Date (MSD): @_formattedMsd</p>
<p>Coordinated Mars Time (CMT): @_coordinatedMarsTime</p>
<p>Mars Mean Anomaly (M): @_formattedMeanAnomaly</p>
<p>Angle of Fiction Mean Sun (alphaFMS): @_formattedAlphaFms</p>
<p>Mars Local Mean Solar Time (LMST): @_formattedMlmst</p>
<p>Equation of Center: @_formattedEoc</p>
<p>Areocentric solar longitude: @_formattedSolarLongitude</p>
<p>EOT: @_formattedEot</p>

@code
{
    private Timer? _timer;
    private DateTime _earthDateTime;
    private string _formattedMillis = string.Empty;
    private string _formattedJulianDateUt = string.Empty;
    private string _formattedJulianDateTt = string.Empty;
    private string _formattedDaysSinceJ2000Epoch = string.Empty;
    private string _formattedMsd = string.Empty;
    private string _coordinatedMarsTime = string.Empty;
    private string _formattedMeanAnomaly = string.Empty;
    private string _formattedAlphaFms = string.Empty;
    private string _formattedMlmst = string.Empty;
    private string _formattedEoc = string.Empty;
    private string _formattedEot = string.Empty;
    private string _formattedSolarLongitude = string.Empty;
    private const double MarsLongitude = 0;


    protected override void OnInitialized()
    {
        _timer = new Timer(1000);
        _timer.Elapsed += UpdateMarsTime;
        _timer.Start();

        UpdateMarsTime(null, null);
    }

    private void UpdateMarsTime(object? sender, ElapsedEventArgs? e)
    {
        var millis = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        var julianDateUt = Mts.GetJulianDateUt(millis);
        var julianDateTt = Mts.GetJulianDateTt(julianDateUt);
        var daysSinceJ2000Epoch = Mts.GetDeltaJ2000(julianDateTt);
        var marsSolDate = Mts.GetMarsSolDate(daysSinceJ2000Epoch);
        var marsMeanAnomaly = Mts.GetMarsMeanAnomaly(daysSinceJ2000Epoch);
        var alphaFms = Mts.GetFictionMeanSun(daysSinceJ2000Epoch);
        var equationOfCenter = Mts.GetEquationOfCenter(marsMeanAnomaly, daysSinceJ2000Epoch);
        var solarLongitude = Mts.GetAreocentricSolarLongitude(alphaFms, equationOfCenter);
        var equationOfTime = Mts.GetEquationOfTime(solarLongitude, equationOfCenter);
        var marsLocalMeanSolarTime = Mts.GetLocalMeanSolarTime(marsSolDate, MarsLongitude);

        _earthDateTime = DateTimeOffset.UtcNow.UtcDateTime;
        _coordinatedMarsTime = Mts.GetCoordinatedMarsTime(marsSolDate);

        _formattedMillis = FormatNumber(millis);
        _formattedJulianDateUt = FormatNumber(julianDateUt);
        _formattedJulianDateTt = FormatNumber(julianDateTt);
        _formattedDaysSinceJ2000Epoch = FormatNumber(daysSinceJ2000Epoch);
        _formattedMsd = FormatNumber(marsSolDate);
        _formattedMeanAnomaly = FormatNumber(marsMeanAnomaly);
        _formattedAlphaFms = FormatNumber(alphaFms);
        _formattedEoc = FormatNumber(equationOfCenter);
        _formattedSolarLongitude = FormatNumber(solarLongitude);
        _formattedEot = FormatNumber(equationOfTime);
        _formattedMlmst = FormatNumber(marsLocalMeanSolarTime);

        InvokeAsync(StateHasChanged);
    }

    private static string FormatNumber(double number)
    {
        var cultureInfo = new CultureInfo("es-ES")
        {
            NumberFormat = { NumberDecimalSeparator = ",", NumberGroupSeparator = "." }
        };
        return number.ToString("N5", cultureInfo);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}